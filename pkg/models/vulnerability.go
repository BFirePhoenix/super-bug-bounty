package models

import (
	"time"
)

// Vulnerability represents a security vulnerability
type Vulnerability struct {
	ID              string            `json:"id" yaml:"id"`
	Type            string            `json:"type" yaml:"type"`
	Severity        string            `json:"severity" yaml:"severity"`
	Title           string            `json:"title" yaml:"title"`
	Description     string            `json:"description" yaml:"description"`
	URL             string            `json:"url" yaml:"url"`
	Parameter       string            `json:"parameter,omitempty" yaml:"parameter,omitempty"`
	Payload         string            `json:"payload,omitempty" yaml:"payload,omitempty"`
	Method          string            `json:"method" yaml:"method"`
	Evidence        string            `json:"evidence,omitempty" yaml:"evidence,omitempty"`
	Impact          string            `json:"impact" yaml:"impact"`
	Remediation     string            `json:"remediation" yaml:"remediation"`
	References      []string          `json:"references,omitempty" yaml:"references,omitempty"`
	Risk            string            `json:"risk" yaml:"risk"`
	Confidence      int               `json:"confidence" yaml:"confidence"`
	Status          string            `json:"status" yaml:"status"`
	ProofOfConcept  string            `json:"proof_of_concept,omitempty" yaml:"proof_of_concept,omitempty"`
	Screenshots     []Screenshot      `json:"screenshots,omitempty" yaml:"screenshots,omitempty"`
	RequestResponse *RequestResponse  `json:"request_response,omitempty" yaml:"request_response,omitempty"`
	Tags            []string          `json:"tags,omitempty" yaml:"tags,omitempty"`
	CVSS            *CVSSScore        `json:"cvss,omitempty" yaml:"cvss,omitempty"`
	CWE             []string          `json:"cwe,omitempty" yaml:"cwe,omitempty"`
	OWASP           []string          `json:"owasp,omitempty" yaml:"owasp,omitempty"`
	CustomFields    map[string]string `json:"custom_fields,omitempty" yaml:"custom_fields,omitempty"`
	Timestamp       time.Time         `json:"timestamp" yaml:"timestamp"`
	LastUpdated     time.Time         `json:"last_updated" yaml:"last_updated"`
	AssignedTo      string            `json:"assigned_to,omitempty" yaml:"assigned_to,omitempty"`
	FixedAt         *time.Time        `json:"fixed_at,omitempty" yaml:"fixed_at,omitempty"`
	VerifiedAt      *time.Time        `json:"verified_at,omitempty" yaml:"verified_at,omitempty"`
}

// Screenshot represents a vulnerability screenshot
type Screenshot struct {
	Filename    string    `json:"filename" yaml:"filename"`
	URL         string    `json:"url" yaml:"url"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty"`
	Timestamp   time.Time `json:"timestamp" yaml:"timestamp"`
	Size        int64     `json:"size" yaml:"size"`
	Format      string    `json:"format" yaml:"format"`
}

// RequestResponse contains HTTP request/response data
type RequestResponse struct {
	Request  HTTPRequest  `json:"request" yaml:"request"`
	Response HTTPResponse `json:"response" yaml:"response"`
}

// HTTPRequest represents an HTTP request
type HTTPRequest struct {
	Method  string      `json:"method" yaml:"method"`
	URL     string      `json:"url" yaml:"url"`
	Headers HTTPHeaders `json:"headers" yaml:"headers"`
	Body    string      `json:"body,omitempty" yaml:"body,omitempty"`
}

// HTTPResponse represents an HTTP response
type HTTPResponse struct {
	StatusCode int         `json:"status_code" yaml:"status_code"`
	Headers    HTTPHeaders `json:"headers" yaml:"headers"`
	Body       string      `json:"body,omitempty" yaml:"body,omitempty"`
	Size       int64       `json:"size" yaml:"size"`
}

// HTTPHeaders represents HTTP headers
type HTTPHeaders map[string][]string

// CVSSScore represents CVSS vulnerability scoring
type CVSSScore struct {
	Version           string  `json:"version" yaml:"version"`
	Vector            string  `json:"vector" yaml:"vector"`
	BaseScore         float64 `json:"base_score" yaml:"base_score"`
	TemporalScore     float64 `json:"temporal_score,omitempty" yaml:"temporal_score,omitempty"`
	EnvironmentalScore float64 `json:"environmental_score,omitempty" yaml:"environmental_score,omitempty"`
	Severity          string  `json:"severity" yaml:"severity"`
}

// VulnerabilityStatus represents the status of a vulnerability
type VulnerabilityStatus string

const (
	StatusNew        VulnerabilityStatus = "new"
	StatusInProgress VulnerabilityStatus = "in_progress"
	StatusFixed      VulnerabilityStatus = "fixed"
	StatusIgnored    VulnerabilityStatus = "ignored"
	StatusDuplicate  VulnerabilityStatus = "duplicate"
	StatusVerified   VulnerabilityStatus = "verified"
	StatusRejected   VulnerabilityStatus = "rejected"
)

// VulnerabilitySeverity represents severity levels
type VulnerabilitySeverity string

const (
	SeverityCritical VulnerabilitySeverity = "critical"
	SeverityHigh     VulnerabilitySeverity = "high"
	SeverityMedium   VulnerabilitySeverity = "medium"
	SeverityLow      VulnerabilitySeverity = "low"
	SeverityInfo     VulnerabilitySeverity = "info"
)

// VulnerabilityType represents common vulnerability types
type VulnerabilityType string

const (
	TypeXSS                    VulnerabilityType = "Cross-Site Scripting (XSS)"
	TypeSQLi                   VulnerabilityType = "SQL Injection"
	TypeRCE                    VulnerabilityType = "Remote Code Execution"
	TypeSSRF                   VulnerabilityType = "Server-Side Request Forgery"
	TypeCORS                   VulnerabilityType = "CORS Misconfiguration"
	TypeCSRF                   VulnerabilityType = "Cross-Site Request Forgery"
	TypeLFI                    VulnerabilityType = "Local File Inclusion"
	TypeRFI                    VulnerabilityType = "Remote File Inclusion"
	TypeIDOR                   VulnerabilityType = "Insecure Direct Object Reference"
	TypeOpenRedirect           VulnerabilityType = "Open Redirect"
	TypeXXE                    VulnerabilityType = "XML External Entity"
	TypeJWTVuln                VulnerabilityType = "JWT Vulnerability"
	TypeAuthBypass             VulnerabilityType = "Authentication Bypass"
	TypePrivEsc                VulnerabilityType = "Privilege Escalation"
	TypeInfoDisclosure         VulnerabilityType = "Information Disclosure"
	TypeBrokenAuthentication   VulnerabilityType = "Broken Authentication"
	TypeSessionManagement      VulnerabilityType = "Session Management"
	TypeCryptographicFailure   VulnerabilityType = "Cryptographic Failure"
	TypeSecurityMisconfiguration VulnerabilityType = "Security Misconfiguration"
)

// Methods for Vulnerability

// IsHighRisk returns true if the vulnerability is high risk
func (v *Vulnerability) IsHighRisk() bool {
	return v.Severity == string(SeverityCritical) || v.Severity == string(SeverityHigh)
}

// GetSeverityScore returns a numeric score for severity
func (v *Vulnerability) GetSeverityScore() int {
	switch VulnerabilitySeverity(v.Severity) {
	case SeverityCritical:
		return 5
	case SeverityHigh:
		return 4
	case SeverityMedium:
		return 3
	case SeverityLow:
		return 2
	case SeverityInfo:
		return 1
	default:
		return 0
	}
}

// AddTag adds a tag to the vulnerability
func (v *Vulnerability) AddTag(tag string) {
	if v.Tags == nil {
		v.Tags = make([]string, 0)
	}
	
	// Check if tag already exists
	for _, existingTag := range v.Tags {
		if existingTag == tag {
			return
		}
	}
	
	v.Tags = append(v.Tags, tag)
}

// HasTag checks if the vulnerability has a specific tag
func (v *Vulnerability) HasTag(tag string) bool {
	for _, existingTag := range v.Tags {
		if existingTag == tag {
			return true
		}
	}
	return false
}

// AddScreenshot adds a screenshot to the vulnerability
func (v *Vulnerability) AddScreenshot(screenshot Screenshot) {
	if v.Screenshots == nil {
		v.Screenshots = make([]Screenshot, 0)
	}
	v.Screenshots = append(v.Screenshots, screenshot)
}

// SetCVSS sets the CVSS score for the vulnerability
func (v *Vulnerability) SetCVSS(cvss CVSSScore) {
	v.CVSS = &cvss
}

// AddCWE adds a CWE identifier to the vulnerability
func (v *Vulnerability) AddCWE(cwe string) {
	if v.CWE == nil {
		v.CWE = make([]string, 0)
	}
	
	// Check if CWE already exists
	for _, existingCWE := range v.CWE {
		if existingCWE == cwe {
			return
		}
	}
	
	v.CWE = append(v.CWE, cwe)
}

// AddOWASP adds an OWASP Top 10 category to the vulnerability
func (v *Vulnerability) AddOWASP(owasp string) {
	if v.OWASP == nil {
		v.OWASP = make([]string, 0)
	}
	
	// Check if OWASP category already exists
	for _, existingOWASP := range v.OWASP {
		if existingOWASP == owasp {
			return
		}
	}
	
	v.OWASP = append(v.OWASP, owasp)
}

// SetCustomField sets a custom field value
func (v *Vulnerability) SetCustomField(key, value string) {
	if v.CustomFields == nil {
		v.CustomFields = make(map[string]string)
	}
	v.CustomFields[key] = value
}

// GetCustomField gets a custom field value
func (v *Vulnerability) GetCustomField(key string) (string, bool) {
	if v.CustomFields == nil {
		return "", false
	}
	value, exists := v.CustomFields[key]
	return value, exists
}

// MarkAsFixed marks the vulnerability as fixed
func (v *Vulnerability) MarkAsFixed() {
	v.Status = string(StatusFixed)
	now := time.Now()
	v.FixedAt = &now
	v.LastUpdated = now
}

// MarkAsVerified marks the vulnerability as verified
func (v *Vulnerability) MarkAsVerified() {
	v.Status = string(StatusVerified)
	now := time.Now()
	v.VerifiedAt = &now
	v.LastUpdated = now
}

// UpdateLastModified updates the last modified timestamp
func (v *Vulnerability) UpdateLastModified() {
	v.LastUpdated = time.Now()
}

// VulnerabilityFilter represents filters for vulnerability queries
type VulnerabilityFilter struct {
	Severities []string  `json:"severities,omitempty"`
	Types      []string  `json:"types,omitempty"`
	Statuses   []string  `json:"statuses,omitempty"`
	Tags       []string  `json:"tags,omitempty"`
	URLs       []string  `json:"urls,omitempty"`
	DateFrom   time.Time `json:"date_from,omitempty"`
	DateTo     time.Time `json:"date_to,omitempty"`
	MinScore   int       `json:"min_score,omitempty"`
	MaxScore   int       `json:"max_score,omitempty"`
	AssignedTo string    `json:"assigned_to,omitempty"`
}

// VulnerabilitySort represents sorting options
type VulnerabilitySort struct {
	Field string `json:"field"`
	Order string `json:"order"` // asc, desc
}

// VulnerabilityQuery represents a query for vulnerabilities
type VulnerabilityQuery struct {
	Filter     VulnerabilityFilter `json:"filter,omitempty"`
	Sort       VulnerabilitySort   `json:"sort,omitempty"`
	Limit      int                 `json:"limit,omitempty"`
	Offset     int                 `json:"offset,omitempty"`
	SearchTerm string              `json:"search_term,omitempty"`
}

// VulnerabilityStats represents vulnerability statistics
type VulnerabilityStats struct {
	Total                int                         `json:"total"`
	BySeverity           map[string]int              `json:"by_severity"`
	ByType               map[string]int              `json:"by_type"`
	ByStatus             map[string]int              `json:"by_status"`
	RecentTrend          []VulnerabilityTrendPoint   `json:"recent_trend"`
	TopVulnerabilities   []VulnerabilityTrendPoint   `json:"top_vulnerabilities"`
	FixRate              float64                     `json:"fix_rate"`
	AverageFixTime       time.Duration               `json:"average_fix_time"`
}

// VulnerabilityTrendPoint represents a point in vulnerability trends
type VulnerabilityTrendPoint struct {
	Date  time.Time `json:"date"`
	Count int       `json:"count"`
	Label string    `json:"label,omitempty"`
}

// VulnerabilityTemplate represents a template for creating vulnerabilities
type VulnerabilityTemplate struct {
	ID           string            `json:"id"`
	Name         string            `json:"name"`
	Type         string            `json:"type"`
	Severity     string            `json:"severity"`
	Title        string            `json:"title"`
	Description  string            `json:"description"`
	Impact       string            `json:"impact"`
	Remediation  string            `json:"remediation"`
	References   []string          `json:"references,omitempty"`
	CWE          []string          `json:"cwe,omitempty"`
	OWASP        []string          `json:"owasp,omitempty"`
	Tags         []string          `json:"tags,omitempty"`
	DefaultCVSS  *CVSSScore        `json:"default_cvss,omitempty"`
	Fields       map[string]string `json:"fields,omitempty"`
}

// CreateVulnerability creates a vulnerability from a template
func (vt *VulnerabilityTemplate) CreateVulnerability(url, parameter string) *Vulnerability {
	now := time.Now()
	
	vuln := &Vulnerability{
		ID:           GenerateVulnID(),
		Type:         vt.Type,
		Severity:     vt.Severity,
		Title:        vt.Title,
		Description:  vt.Description,
		URL:          url,
		Parameter:    parameter,
		Impact:       vt.Impact,
		Remediation:  vt.Remediation,
		References:   vt.References,
		Risk:         vt.Severity,
		Status:       string(StatusNew),
		CWE:          vt.CWE,
		OWASP:        vt.OWASP,
		Tags:         vt.Tags,
		Timestamp:    now,
		LastUpdated:  now,
	}
	
	if vt.DefaultCVSS != nil {
		vuln.CVSS = vt.DefaultCVSS
	}
	
	if vt.Fields != nil {
		vuln.CustomFields = make(map[string]string)
		for k, v := range vt.Fields {
			vuln.CustomFields[k] = v
		}
	}
	
	return vuln
}

// GenerateVulnID generates a unique vulnerability ID
func GenerateVulnID() string {
	return fmt.Sprintf("vuln-%d", time.Now().UnixNano())
}
